{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA,gDACE,CAAA,GAAA,0BAAU,AAAD;AADX,uDAEE,CAAA,GAAA,iCAAiB,AAAD;AAFlB,8CAGE,CAAA,GAAA,wBAAQ,AAAD;AAHT,8CAIE,CAAA,GAAA,wBAAQ,AAAD;AAJT,kDAKE,CAAA,GAAA,4BAAY,AAAD;AALb,mDAME,CAAA,GAAA,6BAAa,AAAD;AANd,2DAOE,CAAA,GAAA,qCAAqB,AAAD;AAPtB,8CAQE,CAAA,GAAA,wBAAQ,AAAD;AART,wDASE,CAAA,GAAA,4BAAkB,AAAD;AATnB,4CAUE,CAAA,GAAA,sBAAM,AAAD;AAGP,oDAAgB;AAIhB,+CAAgB;AA3BhB;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAeO,SAAS,eAAe,MAAM,UAAU,UAAU,CAAA,GAAA,wBAAQ,AAAD,EAAE,kBAAkB;IAClF,OAAO,IAAI,CAAA,GAAA,wBAAQ,AAAD,EAAE;AACtB;AAEO,SAAS,UAAU,IAAI;IAC5B,MAAM,UAAU,SAAS,IAAI,CAAC,aAAa,CAAC,CAAC,wBAAwB,EAAE,KAAK,EAAE,CAAC;IAC/E,IAAI,SACF,OAAO,QAAQ,YAAY,CAAC;AAEhC;;;;;AChCA;;AACA;;AACA;;AACA;;AAEA,8HAA8H;AAE9H,MAAM,EAAC,aAAa,EAAE,SAAS,EAAC,GAAG,CAAA,GAAA,wBAAQ,AAAD;AAC1C,MAAM,qBAAqB,UAAU,KAAK,CAAC,GAAG,UAAU,MAAM,GAAG;AAEjE,MAAM,UAAU,EAAE,CAAC,OAAO;AAE1B,MAAM;IACJ,YAAY,QAAQ,CAAE;QACpB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI;QAC/B,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa;QAChD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAA,GAAA,iCAAiB,AAAD,EAAE,IAAI;QACzC,IAAI,CAAC,YAAY,GAAG;IACtB;IAEA,KAAK,IAAI,EAAE;QACT,IAAI,IAAI,CAAC,MAAM,IAAI;YACjB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,SAAS,CAAC;YACnC,OAAO;QACT,OACE,OAAO;IAEX;IAEA,OAAO;QACL,IAAI,IAAI,CAAC,QAAQ,IAAI;YACnB,CAAA,GAAA,sBAAM,AAAD,EAAE,GAAG,CAAC,CAAC,oDAAoD,EAAE,IAAI,CAAC,QAAQ,GAAG,CAAC;YACnF,OAAO;QACT,OAAO;YACL,MAAM,kBAAkB;mBAAI;mBAAc,IAAI,CAAC,QAAQ,CAAC,YAAY,IAAI,EAAE;aAAC;YAC3E,CAAA,GAAA,sBAAM,AAAD,EAAE,GAAG,CAAC,CAAC,oCAAoC,EAAE,IAAI,CAAC,QAAQ,GAAG,gBAAgB,EAAE,gBAAgB,CAAC;YACrG,IAAI,IAAI,CAAC,SAAS,EAAI,IAAI,CAAC,sBAAsB;YACjD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAA,GAAA,wBAAQ,AAAD,EAAE,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE;YAC3D,IAAI,CAAC,oBAAoB;YACzB,IAAI,CAAC,OAAO,CAAC,KAAK;YAClB,OAAO;QACT;IACF;IAEA,MAAM,EAAC,cAAc,EAAC,GAAG;QAAC,gBAAgB;IAAI,CAAC,EAAE;QAC/C,IAAI,CAAC,gBAAkB,IAAI,CAAC,OAAO,CAAC,IAAI;QACxC,qJAAqJ;QACrJ,IAAI,IAAI,CAAC,MAAM,IACb,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK;IAE/B;IAEA,SAAS;QACP,CAAA,GAAA,sBAAM,AAAD,EAAE,GAAG,CAAC,CAAC,sCAAsC,EAAE,IAAI,CAAC,QAAQ,GAAG,CAAC;QACrE,IAAI,IAAI,CAAC,QAAQ,IACf,IAAI;YACF,OAAO,IAAI,CAAC,KAAK;QACnB,EAAE,OAAO,OAAO;YACd,CAAA,GAAA,sBAAM,AAAD,EAAE,GAAG,CAAC,8BAA8B;QAC3C,SACQ;YACN,CAAA,GAAA,sBAAM,AAAD,EAAE,GAAG,CAAC,CAAC,uBAAuB,EAAE,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,EAAE,CAAC;YACrE,WAAW,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,WAAW;QACpD;aAEA,OAAO,IAAI,CAAC,IAAI;IAEpB;IAEA,cAAc;QACZ,IAAI,IAAI,CAAC,SAAS,EAChB,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ;IAElC;IAEA,SAAS;QACP,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB;IAEA,WAAW;QACT,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ;IAC9B;IAEA,mBAAmB;QACjB,OAAO,IAAI,CAAC,OAAO,CAAC,iBAAiB,GAAG;IAC1C;IAEA,UAAU;IAEV,sBAAsB;QACpB,OAAO,QAAQ,IAAI,CAAC,oBAAoB,IAAI,CAAC,WAAW,OAAO;IACjE;IAEA,QAAQ,GAAG,MAAM,EAAE;QACjB,OAAO,QAAQ,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,OAAO;IAClD;IAEA,WAAW;QACT,IAAI,IAAI,CAAC,SAAS,EAChB,IAAK,IAAI,SAAS,CAAA,GAAA,wBAAQ,AAAD,EAAE,SAAS,CAAE;YACpC,IAAI,CAAA,GAAA,wBAAQ,AAAD,EAAE,SAAS,CAAC,MAAM,KAAK,IAAI,CAAC,SAAS,CAAC,UAAU,EACzD,OAAO,MAAM,WAAW;QAE5B;QAEF,OAAO;IACT;IAEA,uBAAuB;QACrB,IAAK,IAAI,aAAa,IAAI,CAAC,MAAM,CAAE;YACjC,MAAM,UAAU,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI;YAChD,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC,GAAG;QACrC;IACF;IAEA,yBAAyB;QACvB,IAAK,IAAI,aAAa,IAAI,CAAC,MAAM,CAC/B,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC,GAAG,YAAY;IAEnD;AAEF;AAEA,WAAW,WAAW,GAAG;AAEzB,WAAW,SAAS,CAAC,MAAM,GAAG;IAC5B,SAAQ,KAAK;QACX,IAAI,CAAC,IAAI,CAAC,mBAAmB,IAAM;QACnC,MAAM,EAAC,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,EAAC,GAAG,KAAK,KAAK,CAAC,MAAM,IAAI;QAC5E,OAAQ;YACN,KAAK,cAAc,OAAO;gBACxB,IAAI,IAAI,CAAC,gBAAgB,IACvB,IAAI,CAAC,kBAAkB,GAAG;gBAE5B,IAAI,CAAC,OAAO,CAAC,aAAa;gBAC1B,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM;YAClC,KAAK,cAAc,UAAU;gBAC3B,CAAA,GAAA,sBAAM,AAAD,EAAE,GAAG,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;gBAC7C,OAAO,IAAI,CAAC,KAAK,CAAC;oBAAC,gBAAgB;gBAAS;YAC9C,KAAK,cAAc,IAAI;gBACrB,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU;YAChC,KAAK,cAAc,YAAY;gBAC7B,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC;gBACvC,IAAI,IAAI,CAAC,kBAAkB,EAAE;oBAC3B,IAAI,CAAC,kBAAkB,GAAG;oBAC1B,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,YAAY,aAAa;wBAAC,aAAa;oBAAI;gBAC9E,OACE,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,YAAY,aAAa;oBAAC,aAAa;gBAAK;YAEjF,KAAK,cAAc,SAAS;gBAC1B,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC;YACnC;gBACE,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,YAAY,YAAY;QAC7D;IACF;IAEA;QACE,CAAA,GAAA,sBAAM,AAAD,EAAE,GAAG,CAAC,CAAC,+BAA+B,EAAE,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC;QAC9E,IAAI,CAAC,YAAY,GAAG;QACpB,IAAI,CAAC,IAAI,CAAC,mBAAmB,IAAI;YAC/B,CAAA,GAAA,sBAAM,AAAD,EAAE,GAAG,CAAC;YACX,OAAO,IAAI,CAAC,KAAK,CAAC;gBAAC,gBAAgB;YAAK;QAC1C;IACF;IAEA,OAAM,KAAK;QACT,CAAA,GAAA,sBAAM,AAAD,EAAE,GAAG,CAAC;QACX,IAAI,IAAI,CAAC,YAAY,EAAI;QACzB,IAAI,CAAC,YAAY,GAAG;QACpB,IAAI,CAAC,OAAO,CAAC,gBAAgB;QAC7B,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,gBAAgB;YAAC,sBAAsB,IAAI,CAAC,OAAO,CAAC,SAAS;QAAE;IACrG;IAEA;QACE,CAAA,GAAA,sBAAM,AAAD,EAAE,GAAG,CAAC;IACb;AACF;kBAEe;;;;;kBCnLA;IACb,QAAQ,KAAK,OAAO;IACpB,WAAW,KAAK,SAAS;AAC3B;;;;;ACHA;;AAEA,yIAAyI;AACzI,wGAAwG;AAExG,MAAM,MAAM,IAAM,IAAI,OAAO,OAAO;AAEpC,MAAM,eAAe,CAAA,OAAQ,AAAC,CAAA,QAAQ,IAAG,IAAK;AAE9C,MAAM;IACJ,YAAY,UAAU,CAAE;QACtB,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI;QAC7D,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,iBAAiB,GAAG;IAC3B;IAEA,QAAQ;QACN,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI;YACrB,IAAI,CAAC,SAAS,GAAG;YACjB,OAAO,IAAI,CAAC,SAAS;YACrB,IAAI,CAAC,YAAY;YACjB,iBAAiB,oBAAoB,IAAI,CAAC,mBAAmB;YAC7D,CAAA,GAAA,sBAAM,AAAD,EAAE,GAAG,CAAC,CAAC,6CAA6C,EAAE,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,EAAE,CAAC;QAChG;IACF;IAEA,OAAO;QACL,IAAI,IAAI,CAAC,SAAS,IAAI;YACpB,IAAI,CAAC,SAAS,GAAG;YACjB,IAAI,CAAC,WAAW;YAChB,oBAAoB,oBAAoB,IAAI,CAAC,mBAAmB;YAChE,CAAA,GAAA,sBAAM,AAAD,EAAE,GAAG,CAAC;QACb;IACF;IAEA,YAAY;QACV,OAAO,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,SAAS;IAC1C;IAEA,aAAa;QACX,IAAI,CAAC,QAAQ,GAAG;IAClB;IAEA,gBAAgB;QACd,IAAI,CAAC,iBAAiB,GAAG;QACzB,IAAI,CAAC,UAAU;QACf,OAAO,IAAI,CAAC,cAAc;QAC1B,CAAA,GAAA,sBAAM,AAAD,EAAE,GAAG,CAAC;IACb;IAEA,mBAAmB;QACjB,IAAI,CAAC,cAAc,GAAG;QACtB,CAAA,GAAA,sBAAM,AAAD,EAAE,GAAG,CAAC;IACb;IAEA,UAAU;IAEV,eAAe;QACb,IAAI,CAAC,WAAW;QAChB,IAAI,CAAC,IAAI;IACX;IAEA,cAAc;QACZ,aAAa,IAAI,CAAC,WAAW;IAC/B;IAEA,OAAO;QACL,IAAI,CAAC,WAAW,GAAG,WAAW;YAC5B,IAAI,CAAC,gBAAgB;YACrB,IAAI,CAAC,IAAI;QACX,GACE,IAAI,CAAC,eAAe;IACxB;IAEA,kBAAkB;QAChB,MAAM,EAAE,cAAc,EAAE,uBAAuB,EAAE,GAAG,IAAI,CAAC,WAAW;QACpE,MAAM,UAAU,KAAK,GAAG,CAAC,IAAI,yBAAyB,KAAK,GAAG,CAAC,IAAI,CAAC,iBAAiB,EAAE;QACvF,MAAM,YAAY,IAAI,CAAC,iBAAiB,KAAK,IAAI,MAAM;QACvD,MAAM,SAAS,YAAY,KAAK,MAAM;QACtC,OAAO,iBAAiB,OAAO,UAAW,CAAA,IAAI,MAAK;IACrD;IAEA,mBAAmB;QACjB,IAAI,IAAI,CAAC,iBAAiB,IAAI;YAC5B,CAAA,GAAA,sBAAM,AAAD,EAAE,GAAG,CAAC,CAAC,iEAAiE,EAAE,IAAI,CAAC,iBAAiB,CAAC,eAAe,EAAE,aAAa,IAAI,CAAC,WAAW,EAAE,sBAAsB,EAAE,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,EAAE,CAAC;YACjN,IAAI,CAAC,iBAAiB;YACtB,IAAI,IAAI,CAAC,oBAAoB,IAC3B,CAAA,GAAA,sBAAM,AAAD,EAAE,GAAG,CAAC,CAAC,4EAA4E,EAAE,aAAa,IAAI,CAAC,cAAc,EAAE,EAAE,CAAC;iBAC1H;gBACL,CAAA,GAAA,sBAAM,AAAD,EAAE,GAAG,CAAC;gBACX,IAAI,CAAC,UAAU,CAAC,MAAM;YACxB;QACF;IACF;IAEA,IAAI,cAAc;QAChB,OAAO,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS;IACvD;IAEA,oBAAoB;QAClB,OAAO,aAAa,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,cAAc;IACzE;IAEA,uBAAuB;QACrB,OAAO,IAAI,CAAC,cAAc,IAAK,aAAa,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,WAAW,CAAC,cAAc;IACpG;IAEA,sBAAsB;QACpB,IAAI,SAAS,eAAe,KAAK,WAC/B,WAAW;YACT,IAAI,IAAI,CAAC,iBAAiB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,IAAI;gBACzD,CAAA,GAAA,sBAAM,AAAD,EAAE,GAAG,CAAC,CAAC,oFAAoF,EAAE,SAAS,eAAe,CAAC,CAAC;gBAC5H,IAAI,CAAC,UAAU,CAAC,MAAM;YACxB;QACF,GACE;IAEN;AAEF;AAEA,kBAAkB,cAAc,GAAG,EAAE,4DAA4D;;AACjG,kBAAkB,uBAAuB,GAAG;kBAE7B;;;;;AC5Hf;;AAEA,6DAA6D;AAC7D,EAAE;AACF,sCAAsC;AACtC,EAAE;AACF,aAAa;AACb,EAAE;AACF,sDAAsD;AACtD,EAAE;AACF,sCAAsC;AACtC,sDAAsD;AACtD,EAAE;kBAEa;IACb,KAAI,GAAG,QAAQ;QACb,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,SAAS,IAAI,CAAC,KAAK,GAAG;YACtB,CAAA,GAAA,wBAAQ,AAAD,EAAE,MAAM,CAAC,GAAG,CAAC,oBAAoB;QAC1C;IACF;AACF;;;;;kBCrBe;IACb,iBAAiB;QACf,WAAW;QACX,cAAc;QACd,QAAQ;QACR,gBAAgB;QAChB,aAAa;IACf;IACA,sBAAsB;QACpB,gBAAgB;QAChB,mBAAmB;QACnB,kBAAkB;QAClB,UAAU;IACZ;IACA,sBAAsB;IACtB,aAAa;QACX;QACA;KACD;AACH;;;;;AC6CA,wDAAgB;AAhEhB;;AACA;;AA4Be,MAAM;IACnB,YAAY,GAAG,CAAE;QACf,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,aAAa,GAAG,IAAI,CAAA,GAAA,6BAAa,AAAD,EAAE,IAAI;QAC3C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAA,GAAA,0BAAU,AAAD,EAAE,IAAI;QACrC,IAAI,CAAC,YAAY,GAAG,EAAE;IACxB;IAEA,IAAI,MAAM;QACR,OAAO,mBAAmB,IAAI,CAAC,IAAI;IACrC;IAEA,KAAK,IAAI,EAAE;QACT,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;IAC9B;IAEA,UAAU;QACR,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI;IAC7B;IAEA,aAAa;QACX,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;YAAC,gBAAgB;QAAK;IACrD;IAEA,yBAAyB;QACvB,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,IAC3B,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI;IAE/B;IAEA,eAAe,WAAW,EAAE;QAC1B,IAAI,CAAC,YAAY,GAAG;eAAI,IAAI,CAAC,YAAY;YAAE;SAAY;IACzD;AACF;kBAjCqB;AAmCd,SAAS,mBAAmB,GAAG;IACpC,IAAI,OAAO,QAAQ,YACjB,MAAM;IAGR,IAAI,OAAO,CAAC,UAAU,IAAI,CAAC,MAAM;QAC/B,MAAM,IAAI,SAAS,aAAa,CAAC;QACjC,EAAE,IAAI,GAAG;QACT,+EAA+E;QAC/E,EAAE,IAAI,GAAG,EAAE,IAAI;QACf,EAAE,QAAQ,GAAG,EAAE,QAAQ,CAAC,OAAO,CAAC,QAAQ;QACxC,OAAO,EAAE,IAAI;IACf,OACE,OAAO;AAEX;;;;;AC/EA;;AACA;;AACA;;AAYe,MAAM;IACnB,YAAY,QAAQ,CAAE;QACpB,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAA,GAAA,qCAAqB,AAAD,EAAE,IAAI;QAC/C,IAAI,CAAC,aAAa,GAAG,EAAE;IACzB;IAEA,OAAO,WAAW,EAAE,KAAK,EAAE;QACzB,MAAM,UAAU;QAChB,MAAM,SAAS,OAAO,YAAY,WAAW,UAAU;YAAC;QAAO;QAC/D,MAAM,eAAe,IAAI,CAAA,GAAA,4BAAY,AAAD,EAAE,IAAI,CAAC,QAAQ,EAAE,QAAQ;QAC7D,OAAO,IAAI,CAAC,GAAG,CAAC;IAClB;IAEA,UAAU;IAEV,IAAI,YAAY,EAAE;QAChB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;QACxB,IAAI,CAAC,QAAQ,CAAC,sBAAsB;QACpC,IAAI,CAAC,MAAM,CAAC,cAAc;QAC1B,IAAI,CAAC,SAAS,CAAC;QACf,OAAO;IACT;IAEA,OAAO,YAAY,EAAE;QACnB,IAAI,CAAC,MAAM,CAAC;QACZ,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,UAAU,EAAE,MAAM,EAC/C,IAAI,CAAC,WAAW,CAAC,cAAc;QAEjC,OAAO;IACT;IAEA,OAAO,UAAU,EAAE;QACjB,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,GAAG,CAAC,CAAC;YACnC,IAAI,CAAC,MAAM,CAAC;YACZ,IAAI,CAAC,MAAM,CAAC,cAAc;YAC1B,OAAO;QACT;IACF;IAEA,OAAO,YAAY,EAAE;QACnB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;QACtB,IAAI,CAAC,aAAa,GAAI,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,IAAM,MAAM;QAC7D,OAAO;IACT;IAEA,QAAQ,UAAU,EAAE;QAClB,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,IAAM,EAAE,UAAU,KAAK;IAC3D;IAEA,SAAS;QACP,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,eAC7B,IAAI,CAAC,SAAS,CAAC;IACnB;IAEA,UAAU,YAAY,EAAE,GAAG,IAAI,EAAE;QAC/B,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,eAC7B,IAAI,CAAC,MAAM,CAAC,cAAc,iBAAiB;IAC/C;IAEA,OAAO,YAAY,EAAE,YAAY,EAAE,GAAG,IAAI,EAAE;QAC1C,IAAI;QACJ,IAAI,OAAO,iBAAiB,UAC1B,gBAAgB,IAAI,CAAC,OAAO,CAAC;aAE7B,gBAAgB;YAAC;SAAa;QAGhC,OAAO,cAAc,GAAG,CAAC,CAAC,eACvB,OAAO,YAAY,CAAC,aAAa,KAAK,aAAa,YAAY,CAAC,aAAa,IAAI,QAAQ;IAC9F;IAEA,UAAU,YAAY,EAAE;QACtB,IAAI,IAAI,CAAC,WAAW,CAAC,cAAc,cACjC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;IAE7B;IAEA,oBAAoB,UAAU,EAAE;QAC9B,CAAA,GAAA,sBAAM,AAAD,EAAE,GAAG,CAAC,CAAC,uBAAuB,EAAE,WAAW,CAAC;QACjD,IAAI,CAAC,OAAO,CAAC,YAAY,GAAG,CAAC,CAAC,eAC5B,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;IAC1B;IAEA,YAAY,YAAY,EAAE,OAAO,EAAE;QACjC,MAAM,EAAC,UAAU,EAAC,GAAG;QACrB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;YAAC;YAAS;QAAU;IAChD;AACF;kBAxFqB;;;ACdrB,0GAA0G;AAC1G,yGAAyG;AACzG,uCAAuC;AACvC,EAAE;AACF,mDAAmD;AACnD,EAAE;AACF,2EAA2E;AAC3E,oBAAoB;AACpB,wEAAwE;AACxE,SAAS;AACT,EAAE;AACF,wDAAwD;AACxD,oEAAoE;AACpE,yEAAyE;AACzE,mEAAmE;AACnE,yBAAyB;AACzB,SAAS;AACT,EAAE;AACF,iBAAiB;AACjB,mEAAmE;AACnE,SAAS;AACT,EAAE;AACF,eAAe;AACf,6BAA6B;AAC7B,SAAS;AACT,EAAE;AACF,sBAAsB;AACtB,uCAAuC;AACvC,QAAQ;AACR,OAAO;AACP,EAAE;AACF,4GAA4G;AAC5G,2HAA2H;AAC3H,kHAAkH;AAClH,EAAE;AACF,+CAA+C;AAC/C,EAAE;AACF,8DAA8D;AAC9D,qBAAqB;AACrB,4BAA4B;AAC5B,UAAU;AACV,EAAE;AACF,uBAAuB;AACvB,+BAA+B;AAC/B,UAAU;AACV,EAAE;AACF,uBAAuB;AACvB,qDAAqD;AACrD,UAAU;AACV,EAAE;AACF,eAAe;AACf,0BAA0B;AAC1B,UAAU;AACV,QAAQ;AACR,EAAE;AACF,0IAA0I;AAC1I,mIAAmI;;;AAEnI,MAAM,SAAS,SAAS,MAAM,EAAE,UAAU;IACxC,IAAI,cAAc,MAChB,IAAK,IAAI,OAAO,WAAY;QAC1B,MAAM,QAAQ,UAAU,CAAC,IAAI;QAC7B,MAAM,CAAC,IAAI,GAAG;IAChB;IAEF,OAAO;AACT;AAEe,MAAM;IACnB,YAAY,QAAQ,EAAE,SAAS,CAAC,CAAC,EAAE,KAAK,CAAE;QACxC,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,UAAU,GAAG,KAAK,SAAS,CAAC;QACjC,OAAO,IAAI,EAAE;IACf;IAEA,yEAAyE;IACzE,QAAQ,MAAM,EAAE,OAAO,CAAC,CAAC,EAAE;QACzB,KAAK,MAAM,GAAG;QACd,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB;IAEA,KAAK,IAAI,EAAE;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;YAAC,SAAS;YAAW,YAAY,IAAI,CAAC,UAAU;YAAE,MAAM,KAAK,SAAS,CAAC;QAAK;IACxG;IAEA,cAAc;QACZ,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI;IAChD;AACF;kBApBqB;;;;;ACpErB;;AAEA,4GAA4G;AAC5G,6DAA6D;AAE7D,MAAM;IACJ,YAAY,aAAa,CAAE;QACzB,IAAI,CAAC,aAAa,GAAG;QACrB,IAAI,CAAC,oBAAoB,GAAG,EAAE;IAChC;IAEA,UAAU,YAAY,EAAE;QACtB,IAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,iBAAiB,IAAG;YACvD,CAAA,GAAA,sBAAM,AAAD,EAAE,GAAG,CAAC,CAAC,mCAAmC,EAAE,aAAa,UAAU,CAAC,CAAC;YAC1E,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC;QACjC,OAEE,CAAA,GAAA,sBAAM,AAAD,EAAE,GAAG,CAAC,CAAC,2CAA2C,EAAE,aAAa,UAAU,CAAC,CAAC;QAEpF,IAAI,CAAC,iBAAiB;IACxB;IAEA,OAAO,YAAY,EAAE;QACnB,CAAA,GAAA,sBAAM,AAAD,EAAE,GAAG,CAAC,CAAC,iCAAiC,EAAE,aAAa,UAAU,CAAC,CAAC;QACxE,IAAI,CAAC,oBAAoB,GAAI,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,IAAM,MAAM;IAC7E;IAEA,oBAAoB;QAClB,IAAI,CAAC,gBAAgB;QACrB,IAAI,CAAC,gBAAgB;IACvB;IAEA,mBAAmB;QACjB,aAAa,IAAI,CAAC,YAAY;IAChC;IAEA,mBAAmB;QACjB,IAAI,CAAC,YAAY,GAAG,WAAW;YAC7B,IAAI,IAAI,CAAC,aAAa,IAAI,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS,KAAM,YACjE,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;gBAC7B,CAAA,GAAA,sBAAM,AAAD,EAAE,GAAG,CAAC,CAAC,oCAAoC,EAAE,aAAa,UAAU,CAAC,CAAC;gBAC3E,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC;YAC/B;QAEJ,GACE;IACJ;AACF;kBAEe","sources":["node_modules/@rails/actioncable/src/index.js","node_modules/@rails/actioncable/src/connection.js","node_modules/@rails/actioncable/src/adapters.js","node_modules/@rails/actioncable/src/connection_monitor.js","node_modules/@rails/actioncable/src/logger.js","node_modules/@rails/actioncable/src/internal.js","node_modules/@rails/actioncable/src/consumer.js","node_modules/@rails/actioncable/src/subscriptions.js","node_modules/@rails/actioncable/src/subscription.js","node_modules/@rails/actioncable/src/subscription_guarantor.js"],"sourcesContent":["import Connection from \"./connection\"\nimport ConnectionMonitor from \"./connection_monitor\"\nimport Consumer, { createWebSocketURL } from \"./consumer\"\nimport INTERNAL from \"./internal\"\nimport Subscription from \"./subscription\"\nimport Subscriptions from \"./subscriptions\"\nimport SubscriptionGuarantor from \"./subscription_guarantor\"\nimport adapters from \"./adapters\"\nimport logger from \"./logger\"\n\nexport {\n  Connection,\n  ConnectionMonitor,\n  Consumer,\n  INTERNAL,\n  Subscription,\n  Subscriptions,\n  SubscriptionGuarantor,\n  adapters,\n  createWebSocketURL,\n  logger,\n}\n\nexport function createConsumer(url = getConfig(\"url\") || INTERNAL.default_mount_path) {\n  return new Consumer(url)\n}\n\nexport function getConfig(name) {\n  const element = document.head.querySelector(`meta[name='action-cable-${name}']`)\n  if (element) {\n    return element.getAttribute(\"content\")\n  }\n}\n","import adapters from \"./adapters\"\nimport ConnectionMonitor from \"./connection_monitor\"\nimport INTERNAL from \"./internal\"\nimport logger from \"./logger\"\n\n// Encapsulate the cable connection held by the consumer. This is an internal class not intended for direct user manipulation.\n\nconst {message_types, protocols} = INTERNAL\nconst supportedProtocols = protocols.slice(0, protocols.length - 1)\n\nconst indexOf = [].indexOf\n\nclass Connection {\n  constructor(consumer) {\n    this.open = this.open.bind(this)\n    this.consumer = consumer\n    this.subscriptions = this.consumer.subscriptions\n    this.monitor = new ConnectionMonitor(this)\n    this.disconnected = true\n  }\n\n  send(data) {\n    if (this.isOpen()) {\n      this.webSocket.send(JSON.stringify(data))\n      return true\n    } else {\n      return false\n    }\n  }\n\n  open() {\n    if (this.isActive()) {\n      logger.log(`Attempted to open WebSocket, but existing socket is ${this.getState()}`)\n      return false\n    } else {\n      const socketProtocols = [...protocols, ...this.consumer.subprotocols || []]\n      logger.log(`Opening WebSocket, current state is ${this.getState()}, subprotocols: ${socketProtocols}`)\n      if (this.webSocket) { this.uninstallEventHandlers() }\n      this.webSocket = new adapters.WebSocket(this.consumer.url, socketProtocols)\n      this.installEventHandlers()\n      this.monitor.start()\n      return true\n    }\n  }\n\n  close({allowReconnect} = {allowReconnect: true}) {\n    if (!allowReconnect) { this.monitor.stop() }\n    // Avoid closing websockets in a \"connecting\" state due to Safari 15.1+ bug. See: https://github.com/rails/rails/issues/43835#issuecomment-1002288478\n    if (this.isOpen()) {\n      return this.webSocket.close()\n    }\n  }\n\n  reopen() {\n    logger.log(`Reopening WebSocket, current state is ${this.getState()}`)\n    if (this.isActive()) {\n      try {\n        return this.close()\n      } catch (error) {\n        logger.log(\"Failed to reopen WebSocket\", error)\n      }\n      finally {\n        logger.log(`Reopening WebSocket in ${this.constructor.reopenDelay}ms`)\n        setTimeout(this.open, this.constructor.reopenDelay)\n      }\n    } else {\n      return this.open()\n    }\n  }\n\n  getProtocol() {\n    if (this.webSocket) {\n      return this.webSocket.protocol\n    }\n  }\n\n  isOpen() {\n    return this.isState(\"open\")\n  }\n\n  isActive() {\n    return this.isState(\"open\", \"connecting\")\n  }\n\n  triedToReconnect() {\n    return this.monitor.reconnectAttempts > 0\n  }\n\n  // Private\n\n  isProtocolSupported() {\n    return indexOf.call(supportedProtocols, this.getProtocol()) >= 0\n  }\n\n  isState(...states) {\n    return indexOf.call(states, this.getState()) >= 0\n  }\n\n  getState() {\n    if (this.webSocket) {\n      for (let state in adapters.WebSocket) {\n        if (adapters.WebSocket[state] === this.webSocket.readyState) {\n          return state.toLowerCase()\n        }\n      }\n    }\n    return null\n  }\n\n  installEventHandlers() {\n    for (let eventName in this.events) {\n      const handler = this.events[eventName].bind(this)\n      this.webSocket[`on${eventName}`] = handler\n    }\n  }\n\n  uninstallEventHandlers() {\n    for (let eventName in this.events) {\n      this.webSocket[`on${eventName}`] = function() {}\n    }\n  }\n\n}\n\nConnection.reopenDelay = 500\n\nConnection.prototype.events = {\n  message(event) {\n    if (!this.isProtocolSupported()) { return }\n    const {identifier, message, reason, reconnect, type} = JSON.parse(event.data)\n    switch (type) {\n      case message_types.welcome:\n        if (this.triedToReconnect()) {\n          this.reconnectAttempted = true\n        }\n        this.monitor.recordConnect()\n        return this.subscriptions.reload()\n      case message_types.disconnect:\n        logger.log(`Disconnecting. Reason: ${reason}`)\n        return this.close({allowReconnect: reconnect})\n      case message_types.ping:\n        return this.monitor.recordPing()\n      case message_types.confirmation:\n        this.subscriptions.confirmSubscription(identifier)\n        if (this.reconnectAttempted) {\n          this.reconnectAttempted = false\n          return this.subscriptions.notify(identifier, \"connected\", {reconnected: true})\n        } else {\n          return this.subscriptions.notify(identifier, \"connected\", {reconnected: false})\n        }\n      case message_types.rejection:\n        return this.subscriptions.reject(identifier)\n      default:\n        return this.subscriptions.notify(identifier, \"received\", message)\n    }\n  },\n\n  open() {\n    logger.log(`WebSocket onopen event, using '${this.getProtocol()}' subprotocol`)\n    this.disconnected = false\n    if (!this.isProtocolSupported()) {\n      logger.log(\"Protocol is unsupported. Stopping monitor and disconnecting.\")\n      return this.close({allowReconnect: false})\n    }\n  },\n\n  close(event) {\n    logger.log(\"WebSocket onclose event\")\n    if (this.disconnected) { return }\n    this.disconnected = true\n    this.monitor.recordDisconnect()\n    return this.subscriptions.notifyAll(\"disconnected\", {willAttemptReconnect: this.monitor.isRunning()})\n  },\n\n  error() {\n    logger.log(\"WebSocket onerror event\")\n  }\n}\n\nexport default Connection\n","export default {\n  logger: self.console,\n  WebSocket: self.WebSocket\n}\n","import logger from \"./logger\"\n\n// Responsible for ensuring the cable connection is in good health by validating the heartbeat pings sent from the server, and attempting\n// revival reconnections if things go astray. Internal class, not intended for direct user manipulation.\n\nconst now = () => new Date().getTime()\n\nconst secondsSince = time => (now() - time) / 1000\n\nclass ConnectionMonitor {\n  constructor(connection) {\n    this.visibilityDidChange = this.visibilityDidChange.bind(this)\n    this.connection = connection\n    this.reconnectAttempts = 0\n  }\n\n  start() {\n    if (!this.isRunning()) {\n      this.startedAt = now()\n      delete this.stoppedAt\n      this.startPolling()\n      addEventListener(\"visibilitychange\", this.visibilityDidChange)\n      logger.log(`ConnectionMonitor started. stale threshold = ${this.constructor.staleThreshold} s`)\n    }\n  }\n\n  stop() {\n    if (this.isRunning()) {\n      this.stoppedAt = now()\n      this.stopPolling()\n      removeEventListener(\"visibilitychange\", this.visibilityDidChange)\n      logger.log(\"ConnectionMonitor stopped\")\n    }\n  }\n\n  isRunning() {\n    return this.startedAt && !this.stoppedAt\n  }\n\n  recordPing() {\n    this.pingedAt = now()\n  }\n\n  recordConnect() {\n    this.reconnectAttempts = 0\n    this.recordPing()\n    delete this.disconnectedAt\n    logger.log(\"ConnectionMonitor recorded connect\")\n  }\n\n  recordDisconnect() {\n    this.disconnectedAt = now()\n    logger.log(\"ConnectionMonitor recorded disconnect\")\n  }\n\n  // Private\n\n  startPolling() {\n    this.stopPolling()\n    this.poll()\n  }\n\n  stopPolling() {\n    clearTimeout(this.pollTimeout)\n  }\n\n  poll() {\n    this.pollTimeout = setTimeout(() => {\n      this.reconnectIfStale()\n      this.poll()\n    }\n    , this.getPollInterval())\n  }\n\n  getPollInterval() {\n    const { staleThreshold, reconnectionBackoffRate } = this.constructor\n    const backoff = Math.pow(1 + reconnectionBackoffRate, Math.min(this.reconnectAttempts, 10))\n    const jitterMax = this.reconnectAttempts === 0 ? 1.0 : reconnectionBackoffRate\n    const jitter = jitterMax * Math.random()\n    return staleThreshold * 1000 * backoff * (1 + jitter)\n  }\n\n  reconnectIfStale() {\n    if (this.connectionIsStale()) {\n      logger.log(`ConnectionMonitor detected stale connection. reconnectAttempts = ${this.reconnectAttempts}, time stale = ${secondsSince(this.refreshedAt)} s, stale threshold = ${this.constructor.staleThreshold} s`)\n      this.reconnectAttempts++\n      if (this.disconnectedRecently()) {\n        logger.log(`ConnectionMonitor skipping reopening recent disconnect. time disconnected = ${secondsSince(this.disconnectedAt)} s`)\n      } else {\n        logger.log(\"ConnectionMonitor reopening\")\n        this.connection.reopen()\n      }\n    }\n  }\n\n  get refreshedAt() {\n    return this.pingedAt ? this.pingedAt : this.startedAt\n  }\n\n  connectionIsStale() {\n    return secondsSince(this.refreshedAt) > this.constructor.staleThreshold\n  }\n\n  disconnectedRecently() {\n    return this.disconnectedAt && (secondsSince(this.disconnectedAt) < this.constructor.staleThreshold)\n  }\n\n  visibilityDidChange() {\n    if (document.visibilityState === \"visible\") {\n      setTimeout(() => {\n        if (this.connectionIsStale() || !this.connection.isOpen()) {\n          logger.log(`ConnectionMonitor reopening stale connection on visibilitychange. visibilityState = ${document.visibilityState}`)\n          this.connection.reopen()\n        }\n      }\n      , 200)\n    }\n  }\n\n}\n\nConnectionMonitor.staleThreshold = 6 // Server::Connections::BEAT_INTERVAL * 2 (missed two pings)\nConnectionMonitor.reconnectionBackoffRate = 0.15\n\nexport default ConnectionMonitor\n","import adapters from \"./adapters\"\n\n// The logger is disabled by default. You can enable it with:\n//\n//   ActionCable.logger.enabled = true\n//\n//   Example:\n//\n//   import * as ActionCable from '@rails/actioncable'\n//\n//   ActionCable.logger.enabled = true\n//   ActionCable.logger.log('Connection Established.')\n//\n\nexport default {\n  log(...messages) {\n    if (this.enabled) {\n      messages.push(Date.now())\n      adapters.logger.log(\"[ActionCable]\", ...messages)\n    }\n  },\n}\n","export default {\n  \"message_types\": {\n    \"welcome\": \"welcome\",\n    \"disconnect\": \"disconnect\",\n    \"ping\": \"ping\",\n    \"confirmation\": \"confirm_subscription\",\n    \"rejection\": \"reject_subscription\"\n  },\n  \"disconnect_reasons\": {\n    \"unauthorized\": \"unauthorized\",\n    \"invalid_request\": \"invalid_request\",\n    \"server_restart\": \"server_restart\",\n    \"remote\": \"remote\"\n  },\n  \"default_mount_path\": \"/cable\",\n  \"protocols\": [\n    \"actioncable-v1-json\",\n    \"actioncable-unsupported\"\n  ]\n}\n","import Connection from \"./connection\"\nimport Subscriptions from \"./subscriptions\"\n\n// The ActionCable.Consumer establishes the connection to a server-side Ruby Connection object. Once established,\n// the ActionCable.ConnectionMonitor will ensure that its properly maintained through heartbeats and checking for stale updates.\n// The Consumer instance is also the gateway to establishing subscriptions to desired channels through the #createSubscription\n// method.\n//\n// The following example shows how this can be set up:\n//\n//   App = {}\n//   App.cable = ActionCable.createConsumer(\"ws://example.com/accounts/1\")\n//   App.appearance = App.cable.subscriptions.create(\"AppearanceChannel\")\n//\n// For more details on how you'd configure an actual channel subscription, see ActionCable.Subscription.\n//\n// When a consumer is created, it automatically connects with the server.\n//\n// To disconnect from the server, call\n//\n//   App.cable.disconnect()\n//\n// and to restart the connection:\n//\n//   App.cable.connect()\n//\n// Any channel subscriptions which existed prior to disconnecting will\n// automatically resubscribe.\n\nexport default class Consumer {\n  constructor(url) {\n    this._url = url\n    this.subscriptions = new Subscriptions(this)\n    this.connection = new Connection(this)\n    this.subprotocols = []\n  }\n\n  get url() {\n    return createWebSocketURL(this._url)\n  }\n\n  send(data) {\n    return this.connection.send(data)\n  }\n\n  connect() {\n    return this.connection.open()\n  }\n\n  disconnect() {\n    return this.connection.close({allowReconnect: false})\n  }\n\n  ensureActiveConnection() {\n    if (!this.connection.isActive()) {\n      return this.connection.open()\n    }\n  }\n\n  addSubProtocol(subprotocol) {\n    this.subprotocols = [...this.subprotocols, subprotocol]\n  }\n}\n\nexport function createWebSocketURL(url) {\n  if (typeof url === \"function\") {\n    url = url()\n  }\n\n  if (url && !/^wss?:/i.test(url)) {\n    const a = document.createElement(\"a\")\n    a.href = url\n    // Fix populating Location properties in IE. Otherwise, protocol will be blank.\n    a.href = a.href\n    a.protocol = a.protocol.replace(\"http\", \"ws\")\n    return a.href\n  } else {\n    return url\n  }\n}\n","import Subscription from \"./subscription\"\nimport SubscriptionGuarantor from \"./subscription_guarantor\"\nimport logger from \"./logger\"\n\n// Collection class for creating (and internally managing) channel subscriptions.\n// The only method intended to be triggered by the user is ActionCable.Subscriptions#create,\n// and it should be called through the consumer like so:\n//\n//   App = {}\n//   App.cable = ActionCable.createConsumer(\"ws://example.com/accounts/1\")\n//   App.appearance = App.cable.subscriptions.create(\"AppearanceChannel\")\n//\n// For more details on how you'd configure an actual channel subscription, see ActionCable.Subscription.\n\nexport default class Subscriptions {\n  constructor(consumer) {\n    this.consumer = consumer\n    this.guarantor = new SubscriptionGuarantor(this)\n    this.subscriptions = []\n  }\n\n  create(channelName, mixin) {\n    const channel = channelName\n    const params = typeof channel === \"object\" ? channel : {channel}\n    const subscription = new Subscription(this.consumer, params, mixin)\n    return this.add(subscription)\n  }\n\n  // Private\n\n  add(subscription) {\n    this.subscriptions.push(subscription)\n    this.consumer.ensureActiveConnection()\n    this.notify(subscription, \"initialized\")\n    this.subscribe(subscription)\n    return subscription\n  }\n\n  remove(subscription) {\n    this.forget(subscription)\n    if (!this.findAll(subscription.identifier).length) {\n      this.sendCommand(subscription, \"unsubscribe\")\n    }\n    return subscription\n  }\n\n  reject(identifier) {\n    return this.findAll(identifier).map((subscription) => {\n      this.forget(subscription)\n      this.notify(subscription, \"rejected\")\n      return subscription\n    })\n  }\n\n  forget(subscription) {\n    this.guarantor.forget(subscription)\n    this.subscriptions = (this.subscriptions.filter((s) => s !== subscription))\n    return subscription\n  }\n\n  findAll(identifier) {\n    return this.subscriptions.filter((s) => s.identifier === identifier)\n  }\n\n  reload() {\n    return this.subscriptions.map((subscription) =>\n      this.subscribe(subscription))\n  }\n\n  notifyAll(callbackName, ...args) {\n    return this.subscriptions.map((subscription) =>\n      this.notify(subscription, callbackName, ...args))\n  }\n\n  notify(subscription, callbackName, ...args) {\n    let subscriptions\n    if (typeof subscription === \"string\") {\n      subscriptions = this.findAll(subscription)\n    } else {\n      subscriptions = [subscription]\n    }\n\n    return subscriptions.map((subscription) =>\n      (typeof subscription[callbackName] === \"function\" ? subscription[callbackName](...args) : undefined))\n  }\n\n  subscribe(subscription) {\n    if (this.sendCommand(subscription, \"subscribe\")) {\n      this.guarantor.guarantee(subscription)\n    }\n  }\n\n  confirmSubscription(identifier) {\n    logger.log(`Subscription confirmed ${identifier}`)\n    this.findAll(identifier).map((subscription) =>\n      this.guarantor.forget(subscription))\n  }\n\n  sendCommand(subscription, command) {\n    const {identifier} = subscription\n    return this.consumer.send({command, identifier})\n  }\n}\n","// A new subscription is created through the ActionCable.Subscriptions instance available on the consumer.\n// It provides a number of callbacks and a method for calling remote procedure calls on the corresponding\n// Channel instance on the server side.\n//\n// An example demonstrates the basic functionality:\n//\n//   App.appearance = App.cable.subscriptions.create(\"AppearanceChannel\", {\n//     connected() {\n//       // Called once the subscription has been successfully completed\n//     },\n//\n//     disconnected({ willAttemptReconnect: boolean }) {\n//       // Called when the client has disconnected with the server.\n//       // The object will have an `willAttemptReconnect` property which\n//       // says whether the client has the intention of attempting\n//       // to reconnect.\n//     },\n//\n//     appear() {\n//       this.perform('appear', {appearing_on: this.appearingOn()})\n//     },\n//\n//     away() {\n//       this.perform('away')\n//     },\n//\n//     appearingOn() {\n//       $('main').data('appearing-on')\n//     }\n//   })\n//\n// The methods #appear and #away forward their intent to the remote AppearanceChannel instance on the server\n// by calling the `perform` method with the first parameter being the action (which maps to AppearanceChannel#appear/away).\n// The second parameter is a hash that'll get JSON encoded and made available on the server in the data parameter.\n//\n// This is how the server component would look:\n//\n//   class AppearanceChannel < ApplicationActionCable::Channel\n//     def subscribed\n//       current_user.appear\n//     end\n//\n//     def unsubscribed\n//       current_user.disappear\n//     end\n//\n//     def appear(data)\n//       current_user.appear on: data['appearing_on']\n//     end\n//\n//     def away\n//       current_user.away\n//     end\n//   end\n//\n// The \"AppearanceChannel\" name is automatically mapped between the client-side subscription creation and the server-side Ruby class name.\n// The AppearanceChannel#appear/away public methods are exposed automatically to client-side invocation through the perform method.\n\nconst extend = function(object, properties) {\n  if (properties != null) {\n    for (let key in properties) {\n      const value = properties[key]\n      object[key] = value\n    }\n  }\n  return object\n}\n\nexport default class Subscription {\n  constructor(consumer, params = {}, mixin) {\n    this.consumer = consumer\n    this.identifier = JSON.stringify(params)\n    extend(this, mixin)\n  }\n\n  // Perform a channel action with the optional data passed as an attribute\n  perform(action, data = {}) {\n    data.action = action\n    return this.send(data)\n  }\n\n  send(data) {\n    return this.consumer.send({command: \"message\", identifier: this.identifier, data: JSON.stringify(data)})\n  }\n\n  unsubscribe() {\n    return this.consumer.subscriptions.remove(this)\n  }\n}\n","import logger from \"./logger\"\n\n// Responsible for ensuring channel subscribe command is confirmed, retrying until confirmation is received.\n// Internal class, not intended for direct user manipulation.\n\nclass SubscriptionGuarantor {\n  constructor(subscriptions) {\n    this.subscriptions = subscriptions\n    this.pendingSubscriptions = []\n  }\n\n  guarantee(subscription) {\n    if(this.pendingSubscriptions.indexOf(subscription) == -1){ \n      logger.log(`SubscriptionGuarantor guaranteeing ${subscription.identifier}`)\n      this.pendingSubscriptions.push(subscription) \n    }\n    else {\n      logger.log(`SubscriptionGuarantor already guaranteeing ${subscription.identifier}`)\n    }\n    this.startGuaranteeing()\n  }\n\n  forget(subscription) {\n    logger.log(`SubscriptionGuarantor forgetting ${subscription.identifier}`)\n    this.pendingSubscriptions = (this.pendingSubscriptions.filter((s) => s !== subscription))\n  }\n\n  startGuaranteeing() {\n    this.stopGuaranteeing()\n    this.retrySubscribing()\n  }\n  \n  stopGuaranteeing() {\n    clearTimeout(this.retryTimeout)\n  }\n\n  retrySubscribing() {\n    this.retryTimeout = setTimeout(() => {\n      if (this.subscriptions && typeof(this.subscriptions.subscribe) === \"function\") {\n        this.pendingSubscriptions.map((subscription) => {\n          logger.log(`SubscriptionGuarantor resubscribing ${subscription.identifier}`)\n          this.subscriptions.subscribe(subscription)\n        })\n      }\n    }\n    , 500)\n  }\n}\n\nexport default SubscriptionGuarantor"],"names":[],"version":3,"file":"actioncable.410bebd3.js.map","sourceRoot":"/__parcel_source_root/"}